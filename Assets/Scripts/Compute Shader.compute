// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// with cs.SetTexture
RWTexture2D<float4> Result;

// Same Struct as in C# but in HLSL
struct Person
{
    float2 position;
    float2 target_position;
    float speed_percentage;
    int health_status;
};

RWStructuredBuffer<Person> buffer;
RWStructuredBuffer<float2> debug_buffer;

// Variables
float global_speed;


// Functions
float2 Move_Person(float2 current_position, float2 target_position, float global_speed, float speed_percentage,uint3 id);

[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    float2 position_change;
    position_change =  Move_Person(buffer[id.x].position, buffer[id.x].target_position, global_speed, buffer[id.x].speed_percentage,id);
    //debug_buffer[id.x] = position_change;
    buffer[id.x].position += position_change;
    Result[buffer[id.x].position] = float4(1, 1, 1, 0);
}



float2 Move_Person(float2 current_position, float2 target_position, float global_speed, float speed_percentage,uint3 id)
{
    float new_position_x;
    float new_position_y;
    
    float angle_of_movement;
    
    
    angle_of_movement = atan((target_position.x - current_position.x) / (target_position.y - current_position.y));
    //debug_buffer[id.x].x = angle_of_movement;
    
    new_position_x = sin(angle_of_movement);
    new_position_y = cos(angle_of_movement);
    return float2(new_position_x, new_position_y);
}       